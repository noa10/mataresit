name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
      skip_approval:
        description: 'Skip manual approval (emergency deployment)'
        required: false
        default: 'false'
        type: boolean
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: 'false'
        type: boolean

env:
  ENVIRONMENT: production
  NAMESPACE: paperless-maverick
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment validation and approval
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      deployment-approved: ${{ steps.approval.outputs.approved }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine image tag
        id: image-tag
        run: |
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=main-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate production readiness
        run: |
          # Run production readiness tests
          npm ci
          npm run test:phase4:production-readiness
        env:
          TEST_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          format: 'json'
          output: 'security-scan.json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Manual approval gate
        id: approval
        if: github.event.inputs.skip_approval != 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Request
            
            **Image Tag:** ${{ steps.image-tag.outputs.tag }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            **Environment:** Production
            
            ### Pre-deployment Checks
            - ✅ Security scan passed
            - ✅ Production readiness tests passed
            - ✅ Staging deployment successful
            
            ### Deployment Details
            - **Namespace:** ${{ env.NAMESPACE }}
            - **Registry:** ${{ env.REGISTRY }}
            - **Rollback Available:** Yes
            
            Please review and approve this production deployment.
          exclude-workflow-initiator-as-approver: false

  # Blue-Green Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deployment-approved == 'true' || github.event.inputs.skip_approval == 'true'
    environment: 
      name: production
      url: https://mataresit.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Backup current deployment
        run: |
          # Create backup of current deployment
          kubectl get deployment paperless-maverick -n ${{ env.NAMESPACE }} -o yaml > backup-deployment-$(date +%Y%m%d-%H%M%S).yaml
          kubectl get deployment embedding-queue-workers -n ${{ env.NAMESPACE }} -o yaml > backup-workers-$(date +%Y%m%d-%H%M%S).yaml

      - name: Handle rollback
        if: github.event.inputs.rollback == 'true'
        run: |
          echo "Performing rollback..."
          kubectl rollout undo deployment/paperless-maverick -n ${{ env.NAMESPACE }}
          kubectl rollout undo deployment/embedding-queue-workers -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/paperless-maverick -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/embedding-queue-workers -n ${{ env.NAMESPACE }} --timeout=600s
          echo "Rollback completed"
          exit 0

      - name: Update production secrets
        run: |
          # Update secrets with production values
          kubectl create secret generic supabase-secrets \
            --from-literal=url="${{ secrets.SUPABASE_URL }}" \
            --from-literal=anon-key="${{ secrets.SUPABASE_ANON_KEY }}" \
            --from-literal=service-role-key="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic ai-secrets \
            --from-literal=gemini-api-key="${{ secrets.GEMINI_API_KEY }}" \
            --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic security-secrets \
            --from-literal=api-key-encryption-key="${{ secrets.API_KEY_ENCRYPTION_KEY }}" \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic monitoring-secrets \
            --from-literal=sentry-dsn="${{ secrets.SENTRY_DSN }}" \
            --from-literal=grafana-admin-password="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image tags for production
        run: |
          # Update deployment manifests with production image tags
          sed -i "s|paperless-maverick:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}|g" infrastructure/production/kubernetes/deployment.yaml
          sed -i "s|paperless-maverick-worker:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ needs.pre-deployment.outputs.image-tag }}|g" infrastructure/production/kubernetes/deployment.yaml

      - name: Deploy to production
        run: |
          # Apply production configuration
          kubectl apply -f infrastructure/production/kubernetes/configmap.yaml
          kubectl apply -f infrastructure/production/kubernetes/deployment.yaml
          kubectl apply -f infrastructure/production/kubernetes/service.yaml
          kubectl apply -f infrastructure/production/kubernetes/hpa.yaml

      - name: Wait for deployment with health checks
        run: |
          # Wait for deployments to be ready
          kubectl rollout status deployment/paperless-maverick -n ${{ env.NAMESPACE }} --timeout=900s
          kubectl rollout status deployment/embedding-queue-workers -n ${{ env.NAMESPACE }} --timeout=900s
          
          # Verify all pods are ready
          kubectl wait --for=condition=ready pod -l app=paperless-maverick -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl wait --for=condition=ready pod -l app=embedding-queue-worker -n ${{ env.NAMESPACE }} --timeout=600s

      - name: Verify deployment health
        run: |
          # Check deployment status
          kubectl get deployments -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Test health endpoints
          APP_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=paperless-maverick -o jsonpath='{.items[0].metadata.name}')
          WORKER_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=embedding-queue-worker -o jsonpath='{.items[0].metadata.name}')
          
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- curl -f http://localhost:3000/health
          kubectl exec -n ${{ env.NAMESPACE }} $WORKER_POD -- node health-check.js

  # Post-deployment validation
  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production smoke tests
        run: |
          # Test critical functionality
          npm run test:integration
        env:
          TEST_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TEST_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Performance validation
        run: |
          # Run performance benchmarks
          npm run test:performance:benchmark
        env:
          TEST_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Generate deployment report
        run: |
          npm run test:phase4:report
          
      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: production-validation-${{ github.run_number }}
          path: test-results/
          retention-days: 30

  # Automated rollback on failure
  automated-rollback:
    name: Automated Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: failure() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Execute rollback
        run: |
          echo "Post-deployment validation failed. Initiating automated rollback..."
          kubectl rollout undo deployment/paperless-maverick -n ${{ env.NAMESPACE }}
          kubectl rollout undo deployment/embedding-queue-workers -n ${{ env.NAMESPACE }}
          
          # Wait for rollback to complete
          kubectl rollout status deployment/paperless-maverick -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/embedding-queue-workers -n ${{ env.NAMESPACE }} --timeout=600s
          
          echo "Automated rollback completed"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 AUTOMATED ROLLBACK EXECUTED
            
            Production deployment failed post-deployment validation.
            System has been automatically rolled back to previous version.
            
            Image: ${{ needs.pre-deployment.outputs.image-tag }}
            Commit: ${{ github.sha }}
            
            Immediate investigation required!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deployment notifications
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success' && needs.post-deployment-validation.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 PRODUCTION DEPLOYMENT SUCCESSFUL
            
            Environment: Production
            Image: ${{ needs.pre-deployment.outputs.image-tag }}
            Commit: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
            
            Production URL: https://mataresit.com
            
            All validation tests passed ✅
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ PRODUCTION DEPLOYMENT FAILED
            
            Environment: Production
            Image: ${{ needs.pre-deployment.outputs.image-tag }}
            Commit: ${{ github.sha }}
            
            Check workflow logs immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
