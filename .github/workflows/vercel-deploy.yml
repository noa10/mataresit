name: Vercel Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/monitoring.yml'
      - '.github/workflows/security-scan.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  VERCEL_CLI_VERSION: '32.5.0'

jobs:
  # Pre-deployment validation
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENVIRONMENT"

      - name: Validate Vercel configuration
        id: validation
        run: |
          echo "Validating Vercel configuration..."
          
          # Check if vercel.json exists and is valid
          if [[ ! -f "vercel.json" ]]; then
            echo "::error::vercel.json not found"
            exit 1
          fi
          
          # Validate JSON syntax
          if ! jq empty vercel.json 2>/dev/null; then
            echo "::error::vercel.json contains invalid JSON"
            exit 1
          fi
          
          echo "‚úÖ Vercel configuration is valid"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    outputs:
      build-success: ${{ steps.build.outputs.success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        id: build
        run: |
          echo "Building application for ${{ needs.validate.outputs.environment }}..."
          
          # Set environment variables for build
          if [[ "${{ needs.validate.outputs.environment }}" == "production" ]]; then
            export NODE_ENV=production
          else
            export NODE_ENV=staging
          fi
          
          # Build the application
          if npm run build; then
            echo "‚úÖ Build successful"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: steps.build.outputs.success == 'true'
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            dist/
            vercel.json
            package.json
          retention-days: 7

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.build.outputs.build-success == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Vercel secrets
        id: secrets-check
        run: |
          echo "Checking Vercel deployment secrets..."

          MISSING_SECRETS=()

          if [[ -z "${{ secrets.VERCEL_TOKEN }}" ]]; then
            MISSING_SECRETS+=("VERCEL_TOKEN")
          fi

          if [[ -z "${{ secrets.VERCEL_ORG_ID }}" ]]; then
            MISSING_SECRETS+=("VERCEL_ORG_ID")
          fi

          if [[ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]]; then
            MISSING_SECRETS+=("VERCEL_PROJECT_ID")
          fi

          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
            echo "::error::Missing required Vercel secrets: ${MISSING_SECRETS[*]}"
            echo ""
            echo "To enable Vercel deployment, please configure the following secrets in your repository:"
            echo ""
            for secret in "${MISSING_SECRETS[@]}"; do
              echo "- $secret"
            done
            echo ""
            echo "üìö Setup Instructions:"
            echo "1. Go to https://vercel.com/account/tokens to create a VERCEL_TOKEN"
            echo "2. Find your VERCEL_ORG_ID in your Vercel team settings"
            echo "3. Find your VERCEL_PROJECT_ID in your Vercel project settings"
            echo "4. Add these as secrets in GitHub: Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo ""
            echo "üîß Alternative: Use Vercel's GitHub integration for automatic deployments"
            echo "   Visit: https://vercel.com/docs/deployments/git"
            echo ""
            echo "secrets-configured=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ All Vercel secrets are configured"
            echo "secrets-configured=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.secrets-check.outputs.secrets-configured == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        if: steps.secrets-check.outputs.secrets-configured == 'true'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}

      - name: Install dependencies
        if: steps.secrets-check.outputs.secrets-configured == 'true'
        run: npm ci

      - name: Deploy to Vercel
        id: deploy
        if: steps.secrets-check.outputs.secrets-configured == 'true'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: ${{ needs.validate.outputs.environment == 'production' && '--prod' || '' }}

      - name: Verify deployment
        if: steps.secrets-check.outputs.secrets-configured == 'true'
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30

          # Determine domain based on environment
          if [[ "${{ needs.validate.outputs.environment }}" == "production" ]]; then
            DOMAIN="mataresit.com"
          else
            DOMAIN="staging.mataresit.com"
          fi

          echo "Testing deployment at https://$DOMAIN"

          # Test main domain with retries
          for i in {1..5}; do
            if curl -f -s "https://$DOMAIN" > /dev/null; then
              echo "‚úÖ Deployment successful - site is accessible"
              exit 0
            else
              echo "Attempt $i/5: Site not yet accessible, waiting..."
              sleep 10
            fi
          done

          echo "‚ùå Deployment verification failed - site is not accessible after 5 attempts"
          exit 1

      - name: Log deployment skipped
        if: steps.secrets-check.outputs.secrets-configured != 'true'
        run: |
          echo "‚ö†Ô∏è Vercel deployment was skipped due to missing secrets"
          echo ""
          echo "The application build completed successfully, but deployment to Vercel"
          echo "requires the following secrets to be configured:"
          echo "- VERCEL_TOKEN"
          echo "- VERCEL_ORG_ID"
          echo "- VERCEL_PROJECT_ID"
          echo ""
          echo "Please configure these secrets to enable automatic Vercel deployment."

  # Post-deployment validation
  post-deploy:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always() && (needs.deploy.result == 'success' || needs.deploy.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run deployment health checks
        if: needs.deploy.result == 'success'
        run: |
          echo "Running post-deployment health checks..."

          # Determine domain
          if [[ "${{ needs.validate.outputs.environment }}" == "production" ]]; then
            DOMAIN="mataresit.com"
          else
            DOMAIN="staging.mataresit.com"
          fi

          # Test key routes
          ROUTES=("/" "/pricing" "/login")

          for route in "${ROUTES[@]}"; do
            echo "Testing route: $route"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN$route" || echo "000")

            if [[ "$STATUS" =~ ^(200|301|302)$ ]]; then
              echo "‚úÖ Route $route: OK (HTTP $STATUS)"
            else
              echo "‚ö†Ô∏è Route $route: HTTP $STATUS"
            fi
          done

          echo "‚úÖ Post-deployment validation completed"

      - name: Log validation skipped
        if: needs.deploy.result != 'success'
        run: |
          echo "‚ÑπÔ∏è Post-deployment validation skipped"
          echo "Reason: Deployment was not successful or was skipped due to missing Vercel secrets"

      - name: Log deployment success
        run: |
          echo "üöÄ Vercel deployment completed successfully!"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
