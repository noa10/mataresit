name: Vercel + Supabase Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      rollback_type:
        description: 'Type of rollback'
        required: true
        default: 'frontend'
        type: choice
        options:
        - frontend
        - supabase
        - both
      commit_sha:
        description: 'Specific commit SHA to rollback to (optional)'
        required: false
      reason:
        description: 'Reason for rollback'
        required: true
      notify_channels:
        description: 'Notify all channels'
        required: false
        default: 'true'
        type: boolean

jobs:
  # Pre-rollback validation
  pre-rollback:
    name: Pre-rollback Validation
    runs-on: ubuntu-latest
    outputs:
      target-commit: ${{ steps.target.outputs.commit }}
      current-deployment: ${{ steps.current.outputs.deployment }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine target commit
        id: target
        run: |
          if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            TARGET_COMMIT="${{ github.event.inputs.commit_sha }}"
          else
            # Get the previous commit from main branch
            if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              TARGET_COMMIT=$(git log main --oneline -n 2 | tail -1 | cut -d' ' -f1)
            else
              TARGET_COMMIT=$(git log develop --oneline -n 2 | tail -1 | cut -d' ' -f1)
            fi
          fi
          
          echo "commit=$TARGET_COMMIT" >> $GITHUB_OUTPUT
          echo "Target commit for rollback: $TARGET_COMMIT"
          
          # Validate commit exists
          if ! git cat-file -e "$TARGET_COMMIT^{commit}"; then
            echo "Error: Commit $TARGET_COMMIT does not exist"
            exit 1
          fi

      - name: Get current deployment info
        id: current
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "deployment=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          echo "Current deployment: $CURRENT_COMMIT"

  # Emergency approval for production
  emergency-approval:
    name: Emergency Approval
    runs-on: ubuntu-latest
    needs: pre-rollback
    if: github.event.inputs.environment == 'production'
    
    steps:
      - name: Emergency rollback approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.EMERGENCY_APPROVERS }}
          minimum-approvals: 1
          issue-title: "üö® EMERGENCY VERCEL + SUPABASE ROLLBACK"
          issue-body: |
            ## üö® EMERGENCY PRODUCTION ROLLBACK REQUEST
            
            **Environment:** ${{ github.event.inputs.environment }}
            **Rollback Type:** ${{ github.event.inputs.rollback_type }}
            **Reason:** ${{ github.event.inputs.reason }}
            **Requested by:** ${{ github.actor }}
            
            ### Rollback Details
            - **Current Deployment:** ${{ needs.pre-rollback.outputs.current-deployment }}
            - **Target Commit:** ${{ needs.pre-rollback.outputs.target-commit }}
            
            ### ‚ö†Ô∏è WARNING
            This rollback will affect the production environment:
            - Frontend: Vercel deployment will be reverted
            - Backend: Supabase migrations may be affected
            
            **Approve ONLY if there is a critical production issue.**
          exclude-workflow-initiator-as-approver: false

  # Frontend rollback (Vercel)
  frontend-rollback:
    name: Frontend Rollback (Vercel)
    runs-on: ubuntu-latest
    needs: [pre-rollback, emergency-approval]
    if: always() && needs.pre-rollback.result == 'success' && (needs.emergency-approval.result == 'success' || github.event.inputs.environment != 'production') && (github.event.inputs.rollback_type == 'frontend' || github.event.inputs.rollback_type == 'both')
    
    steps:
      - name: Checkout target commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-rollback.outputs.target-commit }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check Vercel secrets
        id: vercel-check
        run: |
          if [[ -z "${{ secrets.VERCEL_TOKEN }}" || -z "${{ secrets.VERCEL_ORG_ID }}" || -z "${{ secrets.VERCEL_PROJECT_ID }}" ]]; then
            echo "::error::Missing required Vercel secrets for rollback"
            echo "Required secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID"
            exit 1
          fi
          echo "‚úÖ Vercel secrets are configured"

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prod'

      - name: Verify frontend rollback
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          DOMAIN="${{ github.event.inputs.environment == 'staging' && 'staging.mataresit.com' || 'mataresit.com' }}"
          
          # Test main domain
          if curl -f "https://$DOMAIN" > /dev/null 2>&1; then
            echo "‚úÖ Frontend rollback successful - site is accessible"
          else
            echo "‚ùå Frontend rollback failed - site is not accessible"
            exit 1
          fi

  # Supabase rollback
  supabase-rollback:
    name: Supabase Rollback
    runs-on: ubuntu-latest
    needs: [pre-rollback, emergency-approval]
    if: always() && needs.pre-rollback.result == 'success' && (needs.emergency-approval.result == 'success' || github.event.inputs.environment != 'production') && (github.event.inputs.rollback_type == 'supabase' || github.event.inputs.rollback_type == 'both')
    
    steps:
      - name: Checkout target commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-rollback.outputs.target-commit }}

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: '1.127.4'

      - name: Rollback Supabase migrations
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          
          if [[ "$ENVIRONMENT" == "production" ]]; then
            PROJECT_ID="${{ secrets.SUPABASE_PROJECT_ID }}"
            SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          else
            PROJECT_ID="${{ secrets.STAGING_SUPABASE_PROJECT_ID }}"
            SUPABASE_SERVICE_KEY="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}"
          fi
          
          # Link to project
          echo "$SUPABASE_SERVICE_KEY" | supabase link --project-ref "$PROJECT_ID"
          
          # Note: Supabase doesn't support automatic migration rollbacks
          # This would require manual intervention or custom rollback scripts
          echo "‚ö†Ô∏è Supabase migration rollback requires manual intervention"
          echo "Please review the database state and apply necessary rollback scripts manually"
          
          # Deploy Edge Functions from target commit
          if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions)" ]; then
            echo "Deploying Edge Functions from target commit..."
            supabase functions deploy
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Post-rollback validation
  post-rollback-validation:
    name: Post-rollback Validation
    runs-on: ubuntu-latest
    needs: [pre-rollback, frontend-rollback, supabase-rollback]
    if: always() && (needs.frontend-rollback.result == 'success' || needs.supabase-rollback.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          echo "üß™ Running post-rollback smoke tests..."
          
          # Run basic connectivity tests
          if npm run test:integration --dry-run 2>/dev/null; then
            npm run test:integration
          else
            echo "Integration tests not available, running basic checks"
            
            DOMAIN="${{ github.event.inputs.environment == 'staging' && 'staging.mataresit.com' || 'mataresit.com' }}"
            
            # Test main site
            if curl -f "https://$DOMAIN" > /dev/null 2>&1; then
              echo "‚úÖ Main site accessible"
            else
              echo "‚ùå Main site not accessible"
              exit 1
            fi
          fi
        env:
          TEST_SUPABASE_URL: ${{ github.event.inputs.environment == 'production' && secrets.SUPABASE_URL || secrets.STAGING_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ github.event.inputs.environment == 'production' && secrets.SUPABASE_ANON_KEY || secrets.STAGING_SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ github.event.inputs.environment == 'production' && secrets.SUPABASE_SERVICE_ROLE_KEY || secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}

  # Notifications
  notify-rollback:
    name: Notify Rollback Status
    runs-on: ubuntu-latest
    needs: [pre-rollback, frontend-rollback, supabase-rollback, post-rollback-validation]
    if: always()
    
    steps:
      - name: Log rollback success
        if: needs.post-rollback-validation.result == 'success'
        run: |
          echo "‚úÖ VERCEL + SUPABASE ROLLBACK COMPLETED"
          echo ""
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Executed by: ${{ github.actor }}"
          echo ""
          echo "Rollback Details:"
          echo "- Target commit: ${{ needs.pre-rollback.outputs.target-commit }}"
          echo "- Frontend: ${{ needs.frontend-rollback.result }}"
          echo "- Supabase: ${{ needs.supabase-rollback.result }}"
          echo "- Validation: ${{ needs.post-rollback-validation.result }}"
          echo ""
          echo "‚úÖ System is operational after rollback"

      - name: Log rollback failure
        if: needs.frontend-rollback.result == 'failure' || needs.supabase-rollback.result == 'failure' || needs.post-rollback-validation.result == 'failure'
        run: |
          echo "üö® VERCEL + SUPABASE ROLLBACK FAILED"
          echo ""
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo ""
          echo "Results:"
          echo "- Frontend: ${{ needs.frontend-rollback.result }}"
          echo "- Supabase: ${{ needs.supabase-rollback.result }}"
          echo "- Validation: ${{ needs.post-rollback-validation.result }}"
          echo ""
          echo "üö® IMMEDIATE MANUAL INTERVENTION REQUIRED"
          echo ""
          echo "‚ÑπÔ∏è To enable Slack notifications:"
          echo "1. Configure SLACK_WEBHOOK_URL in repository secrets"
          echo "2. Re-enable Slack steps in rollback workflow"
