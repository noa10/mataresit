name: Enhanced Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  code-quality-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        id: eslint
        run: |
          npm run lint 2>&1 | tee eslint-results.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Run TypeScript check
        id: typescript
        run: |
          npx tsc --noEmit 2>&1 | tee typescript-results.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Security audit
        id: security-audit
        run: |
          npm audit --audit-level=moderate 2>&1 | tee security-audit.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Check for secrets
        id: secrets-check
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Run Snyk security scan
        id: snyk-scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Evaluate security checks
        id: security-check
        run: |
          SECURITY_PASSED=true
          
          if [[ "${{ steps.security-audit.outputs.passed }}" != "true" ]]; then
            echo "Security audit failed"
            SECURITY_PASSED=false
          fi
          
          if [[ "${{ steps.secrets-check.outcome }}" == "failure" ]]; then
            echo "Secrets check failed"
            SECURITY_PASSED=false
          fi
          
          if [[ "${{ steps.snyk-scan.outcome }}" == "failure" ]]; then
            echo "Snyk scan failed"
            SECURITY_PASSED=false
          fi
          
          echo "passed=$SECURITY_PASSED" >> $GITHUB_OUTPUT

      - name: Evaluate quality checks
        id: quality-check
        run: |
          QUALITY_PASSED=true
          
          if [[ "${{ steps.eslint.outputs.passed }}" != "true" ]]; then
            echo "ESLint check failed"
            QUALITY_PASSED=false
          fi
          
          if [[ "${{ steps.typescript.outputs.passed }}" != "true" ]]; then
            echo "TypeScript check failed"
            QUALITY_PASSED=false
          fi
          
          echo "passed=$QUALITY_PASSED" >> $GITHUB_OUTPUT

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ github.run_number }}
          path: |
            eslint-results.txt
            typescript-results.txt
            security-audit.txt
          retention-days: 7

  # Comprehensive testing suite
  testing:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: code-quality-security
    outputs:
      tests-passed: ${{ steps.test-results.outputs.passed }}
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          npm run test:phase4:setup
        env:
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}
          TEST_GEMINI_API_KEY: ${{ secrets.TEST_GEMINI_API_KEY }}

      - name: Run unit tests
        id: unit-tests
        run: |
          npm run test:unit 2>&1 | tee unit-test-results.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Run integration tests
        id: integration-tests
        run: |
          npm run test:integration 2>&1 | tee integration-test-results.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
        env:
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}
          TEST_GEMINI_API_KEY: ${{ secrets.TEST_GEMINI_API_KEY }}

      - name: Run performance tests
        id: performance-tests
        run: |
          npm run test:performance 2>&1 | tee performance-test-results.txt
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
        env:
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Evaluate test results
        id: test-results
        run: |
          TESTS_PASSED=true
          
          if [[ "${{ steps.unit-tests.outputs.passed }}" != "true" ]]; then
            echo "Unit tests failed"
            TESTS_PASSED=false
          fi
          
          if [[ "${{ steps.integration-tests.outputs.passed }}" != "true" ]]; then
            echo "Integration tests failed"
            TESTS_PASSED=false
          fi
          
          # Performance tests are not blocking for CI
          if [[ "${{ steps.performance-tests.outputs.passed }}" != "true" ]]; then
            echo "Performance tests failed (non-blocking)"
          fi
          
          echo "passed=$TESTS_PASSED" >> $GITHUB_OUTPUT

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            unit-test-results.txt
            integration-test-results.txt
            performance-test-results.txt
            test-results/
          retention-days: 7

  # Build and container security scanning
  build-and-scan:
    name: Build & Container Security
    runs-on: ubuntu-latest
    needs: [code-quality-security, testing]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      container-security-passed: ${{ steps.container-security.outputs.passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/production/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/production/docker/Dockerfile.worker
          push: true
          tags: ${{ steps.meta.outputs.tags }}-worker
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Evaluate container security
        id: container-security
        run: |
          if [[ "${{ steps.trivy-scan.outcome }}" == "success" ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

  # Deployment readiness gate
  deployment-gate:
    name: Deployment Readiness Gate
    runs-on: ubuntu-latest
    needs: [code-quality-security, testing, build-and-scan]
    outputs:
      deployment-ready: ${{ steps.gate-check.outputs.ready }}
      gate-status: ${{ steps.gate-check.outputs.status }}
    
    steps:
      - name: Evaluate deployment readiness
        id: gate-check
        run: |
          DEPLOYMENT_READY=true
          GATE_STATUS="✅ All checks passed"
          
          # Check security
          if [[ "${{ needs.code-quality-security.outputs.security-passed }}" != "true" ]]; then
            echo "❌ Security checks failed"
            DEPLOYMENT_READY=false
            GATE_STATUS="❌ Security checks failed"
          fi
          
          # Check code quality (warning only for non-main branches)
          if [[ "${{ needs.code-quality-security.outputs.quality-passed }}" != "true" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "❌ Code quality checks failed (blocking for main branch)"
              DEPLOYMENT_READY=false
              GATE_STATUS="❌ Code quality checks failed"
            else
              echo "⚠️ Code quality checks failed (non-blocking for feature branches)"
            fi
          fi
          
          # Check tests
          if [[ "${{ needs.testing.outputs.tests-passed }}" != "true" ]]; then
            echo "❌ Tests failed"
            DEPLOYMENT_READY=false
            GATE_STATUS="❌ Tests failed"
          fi
          
          # Check container security
          if [[ "${{ needs.build-and-scan.outputs.container-security-passed }}" != "true" ]]; then
            echo "❌ Container security scan failed"
            DEPLOYMENT_READY=false
            GATE_STATUS="❌ Container security scan failed"
          fi
          
          echo "ready=$DEPLOYMENT_READY" >> $GITHUB_OUTPUT
          echo "status=$GATE_STATUS" >> $GITHUB_OUTPUT

      - name: Update deployment status
        run: |
          echo "## 🚦 Deployment Readiness Gate" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.gate-check.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.code-quality-security.outputs.security-passed == 'true' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality-security.outputs.quality-passed == 'true' && '✅ Passed' || '⚠️ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.testing.outputs.tests-passed == 'true' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security**: ${{ needs.build-and-scan.outputs.container-security-passed == 'true' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.gate-check.outputs.ready }}" == "true" ]]; then
            echo "🎉 **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚫 **Not ready for deployment. Please fix the failing checks.**" >> $GITHUB_STEP_SUMMARY
          fi

  # Trigger deployment workflow
  trigger-deployment:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: [deployment-gate]
    if: needs.deployment-gate.outputs.deployment-ready == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Trigger automated deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environment = context.ref === 'refs/heads/main' ? 'production' : 'staging';
            const imageTag = context.ref === 'refs/heads/main' ? 'latest' : 'develop';
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'automated-deployment.yml',
              ref: context.ref,
              inputs: {
                environment: environment,
                deployment_strategy: 'rolling',
                image_tag: imageTag,
                skip_tests: 'false',
                force_deployment: 'false'
              }
            });
            
            console.log(`Triggered deployment to ${environment} with image tag ${imageTag}`);

      - name: Deployment trigger notification
        run: |
          echo "## 🚀 Deployment Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Automated deployment has been triggered for:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: rolling" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the [Actions tab](https://github.com/${{ github.repository }}/actions) for deployment progress." >> $GITHUB_STEP_SUMMARY
