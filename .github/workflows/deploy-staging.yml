name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'develop'
      skip_tests:
        description: 'Skip post-deployment tests'
        required: false
        default: 'false'
        type: boolean

env:
  ENVIRONMENT: staging
  NAMESPACE: paperless-maverick-staging
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine image tag
        id: image-tag
        run: |
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=develop-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Kubernetes manifests
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Validate manifests
          kubectl apply --dry-run=client -f infrastructure/production/kubernetes/

      - name: Validate Terraform configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Terraform validate
        run: |
          cd infrastructure/production/terraform
          terraform init -backend=false
          terraform validate

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    environment: 
      name: staging
      url: https://staging.mataresit.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup staging secrets
        run: |
          # Create secrets from GitHub secrets
          kubectl create secret generic supabase-secrets \
            --from-literal=url="${{ secrets.STAGING_SUPABASE_URL }}" \
            --from-literal=anon-key="${{ secrets.STAGING_SUPABASE_ANON_KEY }}" \
            --from-literal=service-role-key="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic ai-secrets \
            --from-literal=gemini-api-key="${{ secrets.STAGING_GEMINI_API_KEY }}" \
            --from-literal=openai-api-key="${{ secrets.STAGING_OPENAI_API_KEY }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic security-secrets \
            --from-literal=api-key-encryption-key="${{ secrets.STAGING_API_KEY_ENCRYPTION_KEY }}" \
            --from-literal=jwt-secret="${{ secrets.STAGING_JWT_SECRET }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image tags in manifests
        run: |
          # Update deployment manifests with new image tags
          sed -i "s|paperless-maverick:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}|g" infrastructure/production/kubernetes/deployment.yaml
          sed -i "s|paperless-maverick-worker:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ needs.pre-deployment.outputs.image-tag }}|g" infrastructure/production/kubernetes/deployment.yaml
          
          # Update namespace in manifests
          sed -i "s|namespace: paperless-maverick|namespace: ${{ env.NAMESPACE }}|g" infrastructure/production/kubernetes/*.yaml

      - name: Deploy to staging
        run: |
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/production/kubernetes/namespace.yaml
          kubectl apply -f infrastructure/production/kubernetes/configmap.yaml
          kubectl apply -f infrastructure/production/kubernetes/deployment.yaml
          kubectl apply -f infrastructure/production/kubernetes/service.yaml
          kubectl apply -f infrastructure/production/kubernetes/hpa.yaml

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/paperless-maverick -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/embedding-queue-workers -n ${{ env.NAMESPACE }} --timeout=600s

      - name: Verify deployment
        run: |
          # Check pod status
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          # Check service endpoints
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Verify health checks
          kubectl wait --for=condition=ready pod -l app=paperless-maverick -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l app=embedding-queue-worker -n ${{ env.NAMESPACE }} --timeout=300s

  # Post-deployment tests
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Run health checks
        run: |
          # Get service endpoint
          STAGING_URL=$(kubectl get service paperless-maverick-loadbalancer -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Health check tests
          curl -f http://$STAGING_URL/health || exit 1
          curl -f http://$STAGING_URL/ready || exit 1

      - name: Run smoke tests
        run: |
          # Run basic functionality tests
          npm run test:integration
        env:
          TEST_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
          TEST_GEMINI_API_KEY: ${{ secrets.STAGING_GEMINI_API_KEY }}

      - name: Run performance tests
        run: |
          npm run test:phase4:performance
        env:
          TEST_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-test-results-${{ github.run_number }}
          path: test-results/
          retention-days: 7

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, post-deployment-tests]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: needs.deploy-staging.result == 'success' && needs.post-deployment-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üöÄ Staging deployment successful!
            
            Environment: ${{ env.ENVIRONMENT }}
            Image: ${{ needs.pre-deployment.outputs.image-tag }}
            Commit: ${{ github.sha }}
            
            Staging URL: https://staging.mataresit.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy-staging.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Staging deployment failed!
            
            Environment: ${{ env.ENVIRONMENT }}
            Image: ${{ needs.pre-deployment.outputs.image-tag }}
            Commit: ${{ github.sha }}
            
            Check the workflow logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
