name: Production Monitoring & Health Checks

on:
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - health
        - performance
      timeout:
        description: 'Timeout for health checks (seconds)'
        required: false
        default: '30'

env:
  DOMAIN: ${{ github.event.inputs.environment == 'staging' && 'staging.mataresit.com' || 'mataresit.com' }}
  TIMEOUT: ${{ github.event.inputs.timeout || '30' }}
  CACHE_VERSION: 'v1'

jobs:
  # System Health Monitoring
  health-monitoring:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'health' || github.event_name == 'schedule'
    outputs:
      health-status: ${{ steps.health.outputs.status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Supabase health
        id: health
        run: |
          echo "Checking Supabase and application health..."

          # Test Supabase connectivity
          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_ANON_KEY || secrets.SUPABASE_ANON_KEY }}"

          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_KEY" ]; then
            echo "::error::Missing Supabase configuration"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Test Supabase health endpoint
          SUPABASE_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" "$SUPABASE_URL/health" || echo "000")

          if [ "$SUPABASE_HEALTH" = "200" ]; then
            echo "✅ Supabase health check passed"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "::error::Supabase health check failed (HTTP $SUPABASE_HEALTH)"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Test Vercel deployment endpoints
        run: |
          echo "Testing Vercel deployment endpoints..."

          # Test main application domain
          if curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}" | grep -q "200\|301\|302"; then
            echo "✅ Main domain (${{ env.DOMAIN }}) is accessible"
          else
            echo "❌ Main domain (${{ env.DOMAIN }}) is inaccessible"
            exit 1
          fi

          # Test specific application routes
          ROUTES_TO_TEST=("/" "/pricing" "/login")

          for route in "${ROUTES_TO_TEST[@]}"; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}$route" || echo "000")
            if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "301" ] || [ "$RESPONSE" = "302" ]; then
              echo "✅ Route $route: OK (HTTP $RESPONSE)"
            else
              echo "⚠️ Route $route: HTTP $RESPONSE"
            fi
          done

          # Test API routes if they exist
          API_ROUTES=("/api/health" "/api/status")

          for route in "${API_ROUTES[@]}"; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}$route" || echo "000")
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ API route $route: OK"
            else
              echo "ℹ️ API route $route: HTTP $RESPONSE (may not exist)"
            fi
          done

      - name: Test Supabase Edge Functions
        run: |
          echo "Testing Supabase Edge Functions..."

          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_ANON_KEY || secrets.SUPABASE_ANON_KEY }}"

          # Test key Edge Functions
          FUNCTIONS_TO_TEST=("stripe-webhook" "process-receipt" "manage-api-keys")

          for func in "${FUNCTIONS_TO_TEST[@]}"; do
            echo "Testing function: $func"
            FUNC_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -X POST "$SUPABASE_URL/functions/v1/$func" \
              -H "Authorization: Bearer $SUPABASE_KEY" \
              -H "Content-Type: application/json" \
              -d '{"test": true}' || echo "000")

            if [ "$FUNC_RESPONSE" = "200" ] || [ "$FUNC_RESPONSE" = "400" ] || [ "$FUNC_RESPONSE" = "401" ]; then
              echo "✅ Function $func is responding (HTTP $FUNC_RESPONSE)"
            else
              echo "::warning::Function $func may be unavailable (HTTP $FUNC_RESPONSE)"
            fi
          done

      - name: Test Vercel security headers
        run: |
          echo "Testing Vercel security headers..."

          # Test security headers on main domain
          HEADERS_RESPONSE=$(curl -s -I "https://${{ env.DOMAIN }}" || echo "")

          if echo "$HEADERS_RESPONSE" | grep -i "x-frame-options"; then
            echo "✅ X-Frame-Options header found"
          else
            echo "⚠️ X-Frame-Options header missing"
          fi

          if echo "$HEADERS_RESPONSE" | grep -i "x-content-type-options"; then
            echo "✅ X-Content-Type-Options header found"
          else
            echo "⚠️ X-Content-Type-Options header missing"
          fi

          if echo "$HEADERS_RESPONSE" | grep -i "strict-transport-security"; then
            echo "✅ HSTS header found"
          else
            echo "⚠️ HSTS header missing"
          fi

      - name: Test Vercel deployment status
        run: |
          echo "Checking Vercel deployment status..."

          # Test if the site is served by Vercel
          SERVER_HEADER=$(curl -s -I "https://${{ env.DOMAIN }}" | grep -i "server:" || echo "")

          if echo "$SERVER_HEADER" | grep -i "vercel"; then
            echo "✅ Site is served by Vercel"
          else
            echo "ℹ️ Server header: $SERVER_HEADER"
          fi

  # Supabase Services Monitoring
  supabase-monitoring:
    name: Supabase Services Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'supabase' || github.event_name == 'schedule'
    outputs:
      supabase-status: ${{ steps.supabase.outputs.status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test Supabase Database
        id: supabase
        run: |
          echo "Testing Supabase database services..."

          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_SERVICE_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}"

          # Test database connectivity
          DB_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$SUPABASE_URL/rest/v1/receipts?select=id&limit=1" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "apikey: $SUPABASE_SERVICE_KEY" || echo "000")

          if [ "$DB_RESPONSE" = "200" ] || [ "$DB_RESPONSE" = "404" ]; then
            echo "✅ Database connectivity: OK"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "::error::Database connectivity failed (HTTP $DB_RESPONSE)"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi

          # Test Auth service
          AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$SUPABASE_URL/auth/v1/settings" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "apikey: $SUPABASE_SERVICE_KEY" || echo "000")

          if [ "$AUTH_RESPONSE" = "200" ]; then
            echo "✅ Auth service: OK"
          else
            echo "::warning::Auth service may be unavailable (HTTP $AUTH_RESPONSE)"
          fi

          # Test Storage service
          STORAGE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$SUPABASE_URL/storage/v1/bucket" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "apikey: $SUPABASE_SERVICE_KEY" || echo "000")

          if [ "$STORAGE_RESPONSE" = "200" ]; then
            echo "✅ Storage service: OK"
          else
            echo "::warning::Storage service may be unavailable (HTTP $STORAGE_RESPONSE)"
          fi

      - name: Test Realtime Connections
        run: |
          echo "Testing Realtime service..."

          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_ANON_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_ANON_KEY || secrets.SUPABASE_ANON_KEY }}"

          # Test Realtime WebSocket endpoint
          REALTIME_URL=$(echo "$SUPABASE_URL" | sed 's/https:/wss:/')/realtime/v1/websocket

          # Simple connection test (timeout after 5 seconds)
          if timeout 5 node -e "
            const WebSocket = require('ws');
            const ws = new WebSocket('$REALTIME_URL?apikey=$SUPABASE_ANON_KEY&vsn=1.0.0');
            ws.on('open', () => { console.log('✅ Realtime: Connection successful'); process.exit(0); });
            ws.on('error', (err) => { console.log('::warning::Realtime connection failed:', err.message); process.exit(1); });
            setTimeout(() => { console.log('::warning::Realtime connection timeout'); process.exit(1); }, 4000);
          " 2>/dev/null; then
            echo "Realtime WebSocket test completed"
          else
            echo "::warning::Realtime WebSocket test failed or timed out"
          fi

      - name: Test Queue System
        run: |
          echo "Testing queue system functionality..."

          # Test queue tables exist and are accessible
          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_SERVICE_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}"

          # Check embedding_queue table
          QUEUE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$SUPABASE_URL/rest/v1/embedding_queue?select=id&limit=1" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "apikey: $SUPABASE_SERVICE_KEY" || echo "000")

          if [ "$QUEUE_RESPONSE" = "200" ] || [ "$QUEUE_RESPONSE" = "404" ]; then
            echo "✅ Queue system: Tables accessible"
          else
            echo "::warning::Queue system may have issues (HTTP $QUEUE_RESPONSE)"
          fi

  # Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          echo "Running performance monitoring tests..."

          # Use the simple performance check script for monitoring
          echo "Running monitoring performance checks..."
          npm run test:monitoring:performance

          # If the simple check passes, optionally try the full performance tests
          echo "Attempting full performance test suite..."
          if npm run test:phase4:performance --dry-run 2>/dev/null; then
            echo "Running phase4 performance tests..."
            npm run test:phase4:performance || echo "::warning::Phase4 performance tests failed but monitoring continues"
          else
            echo "::info::Phase4 performance tests not available in CI environment"
          fi
        env:
          TEST_SUPABASE_URL: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Monitor resource usage (if Kubernetes available)
        continue-on-error: true
        run: |
          echo "Monitoring resource usage..."

          # Check if kubectl is available and configured
          if command -v kubectl >/dev/null 2>&1 && [ -n "${{ secrets.PRODUCTION_KUBECONFIG }}" ]; then
            echo "Kubernetes available, checking resource usage..."

            # Configure kubectl
            echo "${{ github.event.inputs.environment == 'staging' && secrets.STAGING_KUBECONFIG || secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig

            # Get resource usage
            kubectl top pods -n ${{ env.NAMESPACE }} 2>/dev/null || echo "::warning::Metrics server not available"
            kubectl top nodes 2>/dev/null || echo "::warning::Node metrics not available"

            # Check HPA status
            kubectl get hpa -n ${{ env.NAMESPACE }} 2>/dev/null || echo "::warning::HPA not found"
            kubectl describe hpa -n ${{ env.NAMESPACE }} 2>/dev/null || echo "::warning::HPA details not available"
          else
            echo "::warning::Kubernetes not configured, skipping resource monitoring"

            # Alternative: Check system resources where possible
            echo "System resource check:"
            free -h || echo "Memory info not available"
            df -h || echo "Disk info not available"
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_number }}
          path: test-results/
          retention-days: 7

  # Security Monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Supabase security configuration
        run: |
          echo "Checking Supabase security configuration..."

          SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
          SUPABASE_SERVICE_KEY="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}"

          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_KEY" ]; then
            echo "::error::Missing Supabase configuration for security checks"
            exit 1
          fi

          # Run comprehensive security checks
          echo "Running security monitoring checks..."
          npm run test:monitoring:security

      - name: Check application security headers
        run: |
          echo "Checking security headers..."

          # Test security headers on main domain
          DOMAIN="${{ github.event.inputs.environment == 'staging' && 'staging.mataresit.com' || 'mataresit.com' }}"

          if curl -s -I "https://$DOMAIN" | grep -i "x-frame-options\|x-content-type-options\|x-xss-protection\|strict-transport-security"; then
            echo "✅ Security headers found"
          else
            echo "::warning::Some security headers may be missing"
          fi

      - name: Check for security vulnerabilities (if Kubernetes available)
        continue-on-error: true
        run: |
          echo "Checking for security vulnerabilities..."

          # Check if kubectl is available and configured
          if command -v kubectl >/dev/null 2>&1 && [ -n "${{ secrets.PRODUCTION_KUBECONFIG }}" ]; then
            echo "Kubernetes available, checking container security..."

            # Configure kubectl
            echo "${{ github.event.inputs.environment == 'staging' && secrets.STAGING_KUBECONFIG || secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig

            # Check for privileged containers
            PRIVILEGED=$(kubectl get pods -n ${{ env.NAMESPACE }} -o jsonpath='{range .items[*]}{range .spec.containers[*]}{.securityContext.privileged}{"\n"}{end}{end}' 2>/dev/null | grep -c true || echo "0")

            if [ "$PRIVILEGED" -gt 0 ]; then
              echo "::warning::Found $PRIVILEGED privileged containers"
            else
              echo "✅ No privileged containers found"
            fi

            # Check for containers running as root
            ROOT_CONTAINERS=$(kubectl get pods -n ${{ env.NAMESPACE }} -o jsonpath='{range .items[*]}{range .spec.containers[*]}{.securityContext.runAsUser}{"\n"}{end}{end}' 2>/dev/null | grep -c "^0$" || echo "0")

            if [ "$ROOT_CONTAINERS" -gt 0 ]; then
              echo "::warning::Found $ROOT_CONTAINERS containers running as root"
            else
              echo "✅ No containers running as root"
            fi
          else
            echo "::warning::Kubernetes not configured, skipping container security checks"
          fi

      - name: Run dependency security scan
        run: |
          echo "Running dependency security scan..."

          # Run npm audit
          npm audit --audit-level=moderate || echo "::warning::Some security vulnerabilities found in dependencies"

          # Check for known vulnerable packages
          if command -v npx >/dev/null 2>&1; then
            npx audit-ci --moderate || echo "::warning::audit-ci found security issues"
          fi

  # Alert System Monitoring
  alert-monitoring:
    name: Alert System Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'alerts' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test alerting system
        continue-on-error: true
        run: |
          echo "Testing alerting system..."

          # Check if alerting integration tests exist
          if npm run test:integration:alerting --dry-run 2>/dev/null; then
            echo "Running alerting integration tests..."
            npm run test:integration:alerting || echo "::warning::Alerting integration tests failed"
          else
            echo "::warning::Alerting integration tests not available, running basic checks"

            # Basic alerting system check
            echo "Checking basic alerting functionality..."

            # Test database connectivity for alerting
            SUPABASE_URL="${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}"
            if curl -s "$SUPABASE_URL/health" > /dev/null; then
              echo "✅ Database connectivity for alerting: OK"
            else
              echo "::warning::Database connectivity for alerting: FAILED"
            fi
          fi
        env:
          TEST_SUPABASE_URL: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_URL || secrets.SUPABASE_URL }}
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Check notification channels
        run: |
          echo "Checking notification channels..."

          # Test Slack webhook (if configured)
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "Testing primary Slack webhook..."
            if curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🔍 Monitoring system health check - all systems operational"}' \
              "${{ secrets.SLACK_WEBHOOK_URL }}" --max-time 10 --silent --fail; then
              echo "✅ Primary Slack webhook: OK"
            else
              echo "::warning::Primary Slack webhook test failed"
            fi
          else
            echo "::warning::Primary Slack webhook not configured"
          fi

          # Test critical alerts webhook (if configured)
          if [ -n "${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL }}" ]; then
            echo "Testing critical alerts webhook..."
            if curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🔍 Critical alerts webhook test - monitoring system check"}' \
              "${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL }}" --max-time 10 --silent --fail; then
              echo "✅ Critical alerts webhook: OK"
            else
              echo "::warning::Critical alerts webhook test failed"
            fi
          else
            echo "::warning::Critical alerts webhook not configured"
          fi

          # Summary
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ] && [ -z "${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL }}" ]; then
            echo "::error::No notification channels configured!"
            echo ""
            echo "🔧 QUICK SETUP:"
            echo "1. Run: npm run setup:slack-webhooks"
            echo "2. Add webhook URLs to GitHub secrets"
            echo "3. See: docs/monitoring/SLACK_WEBHOOK_SETUP.md"
            echo ""
            echo "::notice::Monitoring will continue with GitHub issues as fallback notifications"
          fi

  # Generate Monitoring Report
  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-monitoring, supabase-monitoring, performance-monitoring, security-monitoring, alert-monitoring]
    if: always()
    
    steps:
      - name: Generate monitoring summary
        run: |
          cat > monitoring-report.md << 'EOF'
          # Production Monitoring Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Environment:** ${{ github.event.inputs.environment || 'production' }}
          **Triggered by:** ${{ github.event_name }}
          
          ## System Status Summary
          
          | Component | Status | Details |
          |-----------|--------|---------|
          | Health Check | ${{ needs.health-monitoring.result }} | System health and endpoints |
          | Supabase Services | ${{ needs.supabase-monitoring.result }} | Database, Auth, Storage, Realtime |
          | Performance | ${{ needs.performance-monitoring.result }} | Resource usage and performance |
          | Security | ${{ needs.security-monitoring.result }} | Security policies and vulnerabilities |
          | Alerts | ${{ needs.alert-monitoring.result }} | Alert system functionality |
          
          ## Health Status
          - **Overall Health:** ${{ needs.health-monitoring.outputs.health-status || 'unknown' }}
          
          ## Recommendations
          
          ${{ needs.health-monitoring.result == 'failure' && '⚠️ **CRITICAL**: Health check failed - immediate investigation required' || '' }}
          ${{ needs.performance-monitoring.result == 'failure' && '⚠️ **WARNING**: Performance issues detected - review resource usage' || '' }}
          ${{ needs.security-monitoring.result == 'failure' && '🔒 **SECURITY**: Security issues found - review and fix immediately' || '' }}
          ${{ needs.alert-monitoring.result == 'failure' && '📢 **ALERTS**: Alert system issues - verify notification channels' || '' }}
          
          ## Next Monitoring Check
          - **Scheduled:** Every 15 minutes
          - **Manual:** Use workflow_dispatch to run specific checks
          
          EOF

      - name: Upload monitoring report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_number }}
          path: monitoring-report.md
          retention-days: 30

  # Critical Alert Notifications
  critical-alerts:
    name: Critical Alert Notifications
    runs-on: ubuntu-latest
    needs: [health-monitoring, supabase-monitoring, performance-monitoring, security-monitoring, alert-monitoring]
    if: always() && (needs.health-monitoring.result == 'failure' || needs.supabase-monitoring.result == 'failure' || needs.security-monitoring.result == 'failure')

    steps:
      - name: Prepare alert message
        id: alert-message
        run: |
          ALERT_MESSAGE="🚨 CRITICAL SYSTEM ALERT

          **Environment:** ${{ github.event.inputs.environment || 'production' }}
          **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          **Failed Checks:**"

          if [ "${{ needs.health-monitoring.result }}" = "failure" ]; then
            ALERT_MESSAGE="$ALERT_MESSAGE
          ❌ Health Check Failed"
          fi

          if [ "${{ needs.supabase-monitoring.result }}" = "failure" ]; then
            ALERT_MESSAGE="$ALERT_MESSAGE
          🗄️ Supabase Services Failed"
          fi

          if [ "${{ needs.performance-monitoring.result }}" = "failure" ]; then
            ALERT_MESSAGE="$ALERT_MESSAGE
          ⚠️ Performance Issues"
          fi

          if [ "${{ needs.security-monitoring.result }}" = "failure" ]; then
            ALERT_MESSAGE="$ALERT_MESSAGE
          🔒 Security Issues"
          fi

          if [ "${{ needs.alert-monitoring.result }}" = "failure" ]; then
            ALERT_MESSAGE="$ALERT_MESSAGE
          📢 Alert System Issues"
          fi

          ALERT_MESSAGE="$ALERT_MESSAGE

          **Immediate Action Required:**
          - Check system status dashboard
          - Review application logs
          - Verify service availability
          - Escalate to on-call engineer if needed

          [View Monitoring Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$ALERT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Slack alert (if configured)
        if: ${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: ${{ steps.alert-message.outputs.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL }}

      - name: Send fallback Slack alert (if main webhook not configured)
        if: ${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL == '' && secrets.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: ${{ steps.alert-message.outputs.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Log alert (if no Slack configured)
        if: ${{ secrets.CRITICAL_ALERTS_WEBHOOK_URL == '' && secrets.SLACK_WEBHOOK_URL == '' }}
        run: |
          echo "::error::CRITICAL ALERT - No Slack webhook configured!"
          echo "${{ steps.alert-message.outputs.message }}"
          echo ""
          echo "🔧 WEBHOOK SETUP INSTRUCTIONS:"
          echo "1. Run: npm run setup:slack-webhooks"
          echo "2. Follow the interactive setup guide"
          echo "3. Add the webhook URLs to GitHub repository secrets"
          echo "4. Documentation: docs/monitoring/SLACK_WEBHOOK_SETUP.md"
          echo ""
          echo "::notice::Please configure CRITICAL_ALERTS_WEBHOOK_URL or SLACK_WEBHOOK_URL secret for proper alerting"

      - name: Create incident issue
        if: needs.health-monitoring.result == 'failure' || needs.supabase-monitoring.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 System Health Alert - ${context.payload.inputs?.environment || 'production'}`,
              body: `## 🚨 Critical System Health Alert
              
              **Environment:** ${context.payload.inputs?.environment || 'production'}
              **Time:** ${new Date().toISOString()}
              **Health Status:** ${{ needs.health-monitoring.outputs.health-status }}
              **Supabase Status:** ${{ needs.supabase-monitoring.outputs.supabase-status }}

              ### Failed Checks:
              - Health Monitoring: ${{ needs.health-monitoring.result }}
              - Supabase Services: ${{ needs.supabase-monitoring.result }}
              - Performance: ${{ needs.performance-monitoring.result }}
              - Security: ${{ needs.security-monitoring.result }}
              - Alerts: ${{ needs.alert-monitoring.result }}
              
              ### Immediate Actions Required:
              1. Check system dashboard
              2. Review application and worker logs
              3. Verify database connectivity
              4. Check resource utilization
              5. Escalate if service is down
              
              ### Links:
              - [Monitoring Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Production Dashboard](https://grafana.mataresit.com)
              - [System Logs](https://logs.mataresit.com)
              `,
              labels: ['critical', 'monitoring', 'incident', context.payload.inputs?.environment || 'production']
            });
