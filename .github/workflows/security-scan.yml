name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'supabase/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'supabase/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Setup for Security Scans
  setup-security:
    name: Setup Security Environment
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      node-cache-key: ${{ steps.cache-keys.outputs.node-key }}
      should-run-scans: ${{ steps.scan-decision.outputs.should-run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine scan scope
        id: scan-decision
        run: |
          # Skip scans for documentation-only changes
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }}/files --jq '.[].filename')
            if echo "$CHANGED_FILES" | grep -E '\.(md|txt|yml|yaml)$' && ! echo "$CHANGED_FILES" | grep -E '\.(js|ts|jsx|tsx|json)$'; then
              echo "should-run=false" >> $GITHUB_OUTPUT
              echo "Skipping security scans for documentation-only changes"
              exit 0
            fi
          fi
          echo "should-run=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate cache keys
        id: cache-keys
        if: steps.scan-decision.outputs.should-run == 'true'
        run: |
          echo "node-key=${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        if: steps.scan-decision.outputs.should-run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-deps
        if: steps.scan-decision.outputs.should-run == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ steps.cache-keys.outputs.node-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        if: steps.scan-decision.outputs.should-run == 'true' && steps.cache-deps.outputs.cache-hit != 'true'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm ci

  # Code Security Scanning (Parallel)
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    needs: setup-security
    if: needs.setup-security.outputs.should-run-scans == 'true'
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.setup-security.outputs.node-cache-key }}

      - name: Install dependencies (if cache miss)
        if: needs.setup-security.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Check Snyk token configuration
        run: |
          if [[ -z "${{ secrets.SNYK_TOKEN }}" ]]; then
            echo "::warning::SNYK_TOKEN not configured - skipping Snyk scan"
            echo "To enable Snyk scanning:"
            echo "1. Get API token from https://app.snyk.io/account"
            echo "2. Add SNYK_TOKEN to repository secrets"
            echo "3. See .github/docs/SECURITY_SCANNING_SETUP.md for details"
            exit 0
          else
            echo "âœ… SNYK_TOKEN is configured"
          fi

      - name: Run Snyk security scan
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Upload Snyk results to GitHub Code Scanning
        if: ${{ always() && secrets.SNYK_TOKEN != '' && hashFiles('snyk-results.json') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

      - name: Check for high severity vulnerabilities
        run: |
          if [ -f npm-audit.json ]; then
            HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            
            if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "::error::Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity vulnerabilities"
              exit 1
            fi
          fi

  # Frontend Security Scanning
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    needs: [code-security]
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application for security testing
        run: npm run build

      - name: Run bundle analyzer for security
        run: |
          # Check for potentially dangerous packages in bundle
          if [ -d "dist" ]; then
            echo "Analyzing build output for security issues..."

            # Check for source maps in production (security risk)
            if find dist -name "*.map" | grep -q .; then
              echo "::warning::Source maps found in production build"
            fi

            # Check for large bundle sizes (potential security risk)
            BUNDLE_SIZE=$(du -sb dist/ | cut -f1)
            if [ $BUNDLE_SIZE -gt 10485760 ]; then  # 10MB
              echo "::warning::Large bundle size detected: $(du -sh dist/)"
            fi
          fi

      - name: Scan for client-side vulnerabilities
        run: |
          # Check for common client-side security issues
          echo "Scanning for client-side security vulnerabilities..."

          # Check for hardcoded secrets in build output
          if [ -d "dist" ]; then
            # Look for potential API keys or secrets
            if grep -r "sk_\|pk_\|api_key\|secret" dist/ --include="*.js" --include="*.css" | head -5; then
              echo "::warning::Potential secrets found in build output"
            fi
          fi

  # Supabase Security Scanning
  supabase-security:
    name: Supabase Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Scan Supabase configuration
        run: |
          echo "Scanning Supabase configuration for security issues..."

          # Check for hardcoded secrets in supabase config
          if [ -f "supabase/config.toml" ]; then
            echo "Checking config.toml for security issues..."

            # Check for hardcoded URLs or keys
            if grep -i "localhost\|127.0.0.1\|password\|secret" supabase/config.toml; then
              echo "::warning::Potential hardcoded values in supabase/config.toml"
            fi
          fi

      - name: Scan Edge Functions for security
        run: |
          if [ -d "supabase/functions" ]; then
            echo "Scanning Edge Functions for security issues..."

            # Check for hardcoded secrets in functions
            if grep -r "sk_\|pk_\|api_key\|secret\|password" supabase/functions/ --include="*.ts" --include="*.js" | head -5; then
              echo "::warning::Potential hardcoded secrets in Edge Functions"
            fi

            # Check for unsafe practices
            if grep -r "eval\|innerHTML\|document.write" supabase/functions/ --include="*.ts" --include="*.js" | head -5; then
              echo "::warning::Potentially unsafe code patterns in Edge Functions"
            fi
          fi

      - name: Check database migration security
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "Checking database migrations for security issues..."

            # Check for potential SQL injection patterns
            if grep -r "EXECUTE\|CONCAT\|'.*'.*||" supabase/migrations/ --include="*.sql" | head -5; then
              echo "::warning::Potential SQL injection patterns in migrations"
            fi

            # Check for hardcoded credentials
            if grep -r "password.*=\|secret.*=" supabase/migrations/ --include="*.sql" | head -5; then
              echo "::warning::Potential hardcoded credentials in migrations"
            fi
          fi

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Check GitLeaks configuration
        run: |
          if [[ -z "${{ secrets.GITLEAKS_LICENSE }}" ]]; then
            echo "::notice::GITLEAKS_LICENSE not configured - using free version"
            echo "For private repositories, consider purchasing a GitLeaks license"
          else
            echo "âœ… GITLEAKS_LICENSE is configured"
          fi

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, frontend-security, supabase-security, secrets-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Generate security summary
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report - Vercel + Supabase Architecture

          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Triggered by:** ${{ github.event_name }}

          ## Scan Results Summary

          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | Code Security | ${{ needs.code-security.result }} | CodeQL analysis |
          | Dependencies | ${{ needs.dependency-security.result }} | npm audit + Snyk |
          | Frontend Security | ${{ needs.frontend-security.result }} | Bundle analysis + client-side checks |
          | Supabase Security | ${{ needs.supabase-security.result }} | Edge Functions + config analysis |
          | Secrets | ${{ needs.secrets-scan.result }} | TruffleHog + GitLeaks |

          ## Architecture-Specific Recommendations

          ### Frontend (Vercel)
          - Review client-side security headers
          - Ensure no secrets in build output
          - Validate bundle size and composition

          ### Backend (Supabase)
          - Review Edge Function security
          - Validate database migration security
          - Check RLS policies and permissions

          ### General
          - Update dependencies with known vulnerabilities
          - Rotate any exposed secrets
          - Review authentication and authorization flows

          ## Next Steps

          1. Address critical and high severity issues
          2. Update security policies for serverless architecture
          3. Re-run scans after fixes
          4. Document any accepted risks

          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.md
          retention-days: 90

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });

  # Security Notifications
  security-notifications:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, frontend-security, supabase-security, secrets-scan]
    if: always() && (needs.code-security.result == 'failure' || needs.dependency-security.result == 'failure' || needs.frontend-security.result == 'failure' || needs.supabase-security.result == 'failure' || needs.secrets-scan.result == 'failure')

    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ðŸš¨ SECURITY SCAN FAILURES DETECTED - Vercel + Supabase

            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.event_name }}

            **Failed Scans:**
            - Code Security: ${{ needs.code-security.result }}
            - Dependencies: ${{ needs.dependency-security.result }}
            - Frontend Security: ${{ needs.frontend-security.result }}
            - Supabase Security: ${{ needs.supabase-security.result }}
            - Secrets: ${{ needs.secrets-scan.result }}

            **Action Required:** Review and fix security issues immediately

            [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const failedScans = [];
            if ('${{ needs.code-security.result }}' === 'failure') failedScans.push('Code Security');
            if ('${{ needs.dependency-security.result }}' === 'failure') failedScans.push('Dependencies');
            if ('${{ needs.frontend-security.result }}' === 'failure') failedScans.push('Frontend Security');
            if ('${{ needs.supabase-security.result }}' === 'failure') failedScans.push('Supabase Security');
            if ('${{ needs.secrets-scan.result }}' === 'failure') failedScans.push('Secrets');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ”’ Security Scan Failures - Vercel + Supabase - ${new Date().toISOString().split('T')[0]}`,
              body: `## Security Scan Failures Detected

              **Date:** ${new Date().toISOString()}
              **Commit:** ${context.sha}
              **Architecture:** Vercel + Supabase
              **Failed Scans:** ${failedScans.join(', ')}

              ### Action Required:
              1. Review the security scan results
              2. Fix identified vulnerabilities
              3. Update dependencies if needed
              4. Check Supabase Edge Functions and configuration
              5. Validate frontend build security
              6. Re-run security scans

              ### Links:
              - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Security Tab](${context.payload.repository.html_url}/security)
              `,
              labels: ['security', 'vulnerability', 'automated', 'vercel', 'supabase']
            });
