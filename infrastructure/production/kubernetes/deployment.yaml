apiVersion: apps/v1
kind: Deployment
metadata:
  name: paperless-maverick
  namespace: paperless-maverick
  labels:
    app: paperless-maverick
    environment: production
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: paperless-maverick
  template:
    metadata:
      labels:
        app: paperless-maverick
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: paperless-maverick
        image: paperless-maverick:latest
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: LOG_LEVEL
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: PORT
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: url
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: anon-key
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: service-role-key
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: gemini-api-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: openai-api-key
        - name: API_KEY_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: security-secrets
              key: api-key-encryption-key
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: sentry-dsn
        - name: ENABLE_PERFORMANCE_MONITORING
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: ENABLE_PERFORMANCE_MONITORING
        - name: ENABLE_EMBEDDING_MONITORING
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: ENABLE_EMBEDDING_MONITORING
        - name: EMBEDDING_MONITORING_ROLLOUT_PERCENTAGE
          valueFrom:
            configMapKeyRef:
              name: paperless-maverick-config
              key: EMBEDDING_MONITORING_ROLLOUT_PERCENTAGE
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: embedding-queue-workers
  namespace: paperless-maverick
  labels:
    app: embedding-queue-worker
    environment: production
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: embedding-queue-worker
  template:
    metadata:
      labels:
        app: embedding-queue-worker
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9091"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: embedding-worker
        image: paperless-maverick-worker:latest
        ports:
        - containerPort: 8080
          name: health
        - containerPort: 9091
          name: metrics
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: embedding-worker-config
              key: NODE_ENV
        - name: WORKER_TYPE
          valueFrom:
            configMapKeyRef:
              name: embedding-worker-config
              key: WORKER_TYPE
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: url
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: service-role-key
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: gemini-api-key
        - name: QUEUE_POLL_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: embedding-worker-config
              key: QUEUE_POLL_INTERVAL
        - name: MAX_CONCURRENT_JOBS
          valueFrom:
            configMapKeyRef:
              name: embedding-worker-config
              key: MAX_CONCURRENT_JOBS
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: worker-logs
          mountPath: /app/logs
      volumes:
      - name: worker-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
