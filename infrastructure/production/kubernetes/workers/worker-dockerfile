# Multi-stage Dockerfile for Embedding Queue Workers
# Optimized for production deployment with security and performance

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY public/ ./public/

# Build the application
RUN npm run build:worker

# Production stage
FROM node:18-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S worker && \
    adduser -S worker -u 1001 -G worker

# Install runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=worker:worker /app/dist ./dist
COPY --from=builder --chown=worker:worker /app/node_modules ./node_modules
COPY --from=builder --chown=worker:worker /app/package*.json ./

# Copy worker-specific files
COPY --chown=worker:worker src/workers/ ./workers/
COPY --chown=worker:worker scripts/worker-entrypoint.sh ./entrypoint.sh

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp /app/config && \
    chown -R worker:worker /app/logs /app/tmp /app/config

# Make entrypoint executable
RUN chmod +x ./entrypoint.sh

# Set environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV UV_THREADPOOL_SIZE=4

# Health check script
COPY --chown=worker:worker <<EOF /app/healthcheck.sh
#!/bin/sh
set -e

# Check if the worker process is running
if ! pgrep -f "node.*worker" > /dev/null; then
    echo "Worker process not found"
    exit 1
fi

# Check health endpoint
if ! curl -f -s --max-time 5 http://localhost:8080/health > /dev/null; then
    echo "Health endpoint not responding"
    exit 1
fi

# Check if worker is processing jobs (optional)
if [ "\$ENABLE_JOB_CHECK" = "true" ]; then
    LAST_JOB_TIME=\$(curl -s http://localhost:8080/metrics | grep -o 'last_job_processed_timestamp [0-9]*' | cut -d' ' -f2)
    CURRENT_TIME=\$(date +%s)
    
    if [ -n "\$LAST_JOB_TIME" ] && [ \$((CURRENT_TIME - LAST_JOB_TIME)) -gt 300 ]; then
        echo "Worker hasn't processed jobs in 5 minutes"
        exit 1
    fi
fi

echo "Worker is healthy"
exit 0
EOF

RUN chmod +x /app/healthcheck.sh

# Switch to non-root user
USER worker

# Expose ports
EXPOSE 8080 9091

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the worker
CMD ["./entrypoint.sh"]

# Labels for metadata
LABEL maintainer="Paperless Maverick Team"
LABEL version="1.0.0"
LABEL description="Embedding Queue Worker for Paperless Maverick"
LABEL org.opencontainers.image.title="Paperless Maverick Worker"
LABEL org.opencontainers.image.description="Production-ready embedding queue worker"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.created="2024-01-20"
LABEL org.opencontainers.image.source="https://github.com/company/paperless-maverick"
LABEL org.opencontainers.image.licenses="MIT"
