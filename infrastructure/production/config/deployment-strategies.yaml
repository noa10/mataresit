# Deployment Strategies Configuration for Paperless Maverick
# Defines deployment strategies, health checks, and rollback procedures
# Version: 1.0.0

# Global deployment settings
global:
  version: "1.0.0"
  project_name: "paperless-maverick"
  default_timeout: 600
  health_check_timeout: 300
  rollback_timeout: 300
  max_rollback_attempts: 3

# Deployment strategies
strategies:
  rolling_update:
    description: "Rolling update deployment with zero downtime"
    default: true
    settings:
      max_surge: 1
      max_unavailable: 0
      progress_deadline_seconds: 600
      revision_history_limit: 10
    health_checks:
      readiness_probe:
        enabled: true
        initial_delay_seconds: 30
        period_seconds: 10
        timeout_seconds: 5
        failure_threshold: 3
        success_threshold: 1
      liveness_probe:
        enabled: true
        initial_delay_seconds: 60
        period_seconds: 30
        timeout_seconds: 10
        failure_threshold: 3
    rollback:
      automatic: true
      on_failure: true
      preserve_history: true
    
  blue_green:
    description: "Blue-green deployment with traffic switching"
    settings:
      traffic_switch_delay: 30
      cleanup_delay: 300
      validation_period: 300
    health_checks:
      pre_switch_validation: true
      post_switch_validation: true
      performance_validation: true
    rollback:
      automatic: true
      switch_back_on_failure: true
      cleanup_failed_deployment: true
    
  canary:
    description: "Canary deployment with gradual traffic rollout"
    settings:
      initial_traffic_percentage: 10
      traffic_increment: 10
      increment_interval: 300
      max_traffic_percentage: 100
      monitoring_period: 300
    health_checks:
      canary_validation: true
      error_rate_threshold: 0.05
      response_time_threshold: 2000
      success_rate_threshold: 0.95
    rollback:
      automatic: true
      on_error_threshold: true
      cleanup_canary: true

# Environment-specific configurations
environments:
  production:
    default_strategy: "rolling_update"
    allowed_strategies: ["rolling_update", "blue_green", "canary"]
    health_checks:
      mandatory: true
      deep_validation: true
      performance_validation: true
      database_validation: true
    rollback:
      automatic_rollback: true
      confirmation_required: false
      preserve_data: true
    thresholds:
      cpu_threshold: 80
      memory_threshold: 85
      response_time_threshold: 2000
      error_rate_threshold: 5
      success_rate_threshold: 95
    
  staging:
    default_strategy: "rolling_update"
    allowed_strategies: ["rolling_update", "blue_green", "canary"]
    health_checks:
      mandatory: true
      deep_validation: false
      performance_validation: true
      database_validation: true
    rollback:
      automatic_rollback: true
      confirmation_required: false
      preserve_data: true
    thresholds:
      cpu_threshold: 85
      memory_threshold: 90
      response_time_threshold: 3000
      error_rate_threshold: 10
      success_rate_threshold: 90
    
  development:
    default_strategy: "rolling_update"
    allowed_strategies: ["rolling_update"]
    health_checks:
      mandatory: false
      deep_validation: false
      performance_validation: false
      database_validation: false
    rollback:
      automatic_rollback: false
      confirmation_required: false
      preserve_data: false
    thresholds:
      cpu_threshold: 90
      memory_threshold: 95
      response_time_threshold: 5000
      error_rate_threshold: 20
      success_rate_threshold: 80

# Health check endpoints
health_endpoints:
  primary:
    path: "/health"
    port: 3000
    protocol: "HTTP"
    expected_status: 200
    timeout: 5
    
  readiness:
    path: "/ready"
    port: 3000
    protocol: "HTTP"
    expected_status: 200
    timeout: 5
    
  deep_health:
    path: "/health/deep"
    port: 3000
    protocol: "HTTP"
    expected_status: 200
    timeout: 10
    
  metrics:
    path: "/metrics"
    port: 3000
    protocol: "HTTP"
    expected_status: 200
    timeout: 5
    
  database:
    path: "/api/monitoring/health"
    port: 3000
    protocol: "HTTP"
    expected_status: 200
    timeout: 10

# Performance validation criteria
performance_criteria:
  response_time:
    p50_threshold: 500
    p95_threshold: 2000
    p99_threshold: 5000
    
  throughput:
    min_requests_per_second: 10
    target_requests_per_second: 100
    
  error_rates:
    max_4xx_rate: 0.05
    max_5xx_rate: 0.01
    max_total_error_rate: 0.05
    
  resource_utilization:
    max_cpu_percentage: 80
    max_memory_percentage: 85
    max_disk_percentage: 90

# Rollback procedures
rollback_procedures:
  automatic:
    triggers:
      - health_check_failure
      - performance_degradation
      - error_rate_exceeded
      - deployment_timeout
    conditions:
      consecutive_failures: 3
      failure_window: 300
      error_rate_threshold: 0.1
    actions:
      - stop_deployment
      - revert_to_previous
      - validate_rollback
      - notify_team
      
  manual:
    triggers:
      - user_initiated
      - emergency_rollback
    conditions:
      confirmation_required: true
      reason_required: true
    actions:
      - create_rollback_backup
      - execute_rollback
      - validate_rollback
      - update_deployment_history

# Monitoring and alerting
monitoring:
  deployment_metrics:
    - deployment_duration
    - success_rate
    - rollback_frequency
    - health_check_results
    - performance_metrics
    
  alerts:
    deployment_failure:
      severity: "critical"
      channels: ["slack", "email"]
      
    rollback_triggered:
      severity: "high"
      channels: ["slack", "email"]
      
    performance_degradation:
      severity: "medium"
      channels: ["slack"]
      
    health_check_warning:
      severity: "low"
      channels: ["slack"]

# Feature flag integration
feature_flags:
  deployment_strategies:
    blue_green_enabled: true
    canary_enabled: true
    rollback_automation: true
    performance_validation: true
    
  rollout_percentages:
    new_deployment_strategy: 10
    enhanced_health_checks: 25
    automated_rollback: 50

# Validation rules
validation_rules:
  pre_deployment:
    - check_image_availability
    - validate_configuration
    - verify_dependencies
    - check_resource_quotas
    
  during_deployment:
    - monitor_pod_status
    - check_health_endpoints
    - validate_service_connectivity
    - monitor_resource_usage
    
  post_deployment:
    - comprehensive_health_check
    - performance_validation
    - database_connectivity
    - end_to_end_testing

# Integration settings
integrations:
  kubernetes:
    api_version: "apps/v1"
    resource_types: ["Deployment", "Service", "ConfigMap", "Secret"]
    
  monitoring:
    prometheus_enabled: true
    grafana_dashboards: true
    custom_metrics: true
    
  notifications:
    slack_enabled: false
    email_enabled: false
    webhook_enabled: true
    
  ci_cd:
    github_actions: true
    automated_testing: true
    security_scanning: true

# Security settings
security:
  image_scanning:
    enabled: true
    fail_on_critical: true
    fail_on_high: false
    
  network_policies:
    enabled: true
    default_deny: true
    
  rbac:
    enabled: true
    least_privilege: true
    
  secrets_management:
    rotation_enabled: true
    encryption_at_rest: true
