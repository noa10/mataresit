version: '3.8'

services:
  # Main Application
  paperless-maverick:
    build:
      context: ../../../
      dockerfile: infrastructure/production/docker/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_KEY_ENCRYPTION_KEY=${API_KEY_ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_PERFORMANCE_MONITORING=${ENABLE_PERFORMANCE_MONITORING:-true}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app-logs:/app/logs
    networks:
      - paperless-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Embedding Queue Workers
  embedding-worker-1:
    build:
      context: ../../../
      dockerfile: infrastructure/production/docker/Dockerfile.worker
    environment:
      - NODE_ENV=production
      - WORKER_ID=worker-1
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - QUEUE_POLL_INTERVAL=${QUEUE_POLL_INTERVAL:-5000}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - worker-logs:/app/logs
    networks:
      - paperless-network
    restart: unless-stopped
    depends_on:
      - paperless-maverick

  embedding-worker-2:
    build:
      context: ../../../
      dockerfile: infrastructure/production/docker/Dockerfile.worker
    environment:
      - NODE_ENV=production
      - WORKER_ID=worker-2
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - QUEUE_POLL_INTERVAL=${QUEUE_POLL_INTERVAL:-5000}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - worker-logs:/app/logs
    networks:
      - paperless-network
    restart: unless-stopped
    depends_on:
      - paperless-maverick

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - paperless-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - paperless-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - paperless-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  app-logs:
  worker-logs:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  paperless-network:
    driver: bridge
